# AHA-GUI Score Configuration File

# Lines starting with # or // will be ignored
# Format is 4 quoted comma separated values ex:
# "eq","ASLR","TRUE","10" 

# The first column, tells us how to look: "eq" means equals, it will look for that exact value (case insensitive); "ct" means contains, it will do a case insensitive .contains for string matching

# Second field will tell us to look for ASLR (case insensitive), and if the value is TRUE (case insensitive) then add the points column to the score

# Third column is the value we're looking for i.e. "TRUE". This column can also have a set of values (only this column) such as "user1|user2|user3" that will all use the same score value
#     NOTE: scoring evaluation of multi criteria is stateless, so if you do "ct" and then put in vague values like "a|ab|ba" and the score input is "a" it will match all 3 and give 3x points!

# Fourth column points column is parsed as is, as an integer. Negative values will still be added (i.e. -10 would be added to the score, reducing the score)
# Valid range of the points column is -100 to 100 inclusive.

# The fifth column is the platform name. "Multiplatform" is a special name (exact spelling, case insensitive) which attributes this score line to any platform. Any other term here (used consistently) will lump that 
score line in together with others with the same identifier. This is used when calculating the maximum score, which is the max of multiplatform plus the platform with the largest individual max score. 
(i.e. if multiplatform is 70, windows is 30, and linux is 20, then the score banding used to color the GUI will be out of 100 (the max platform is 30, plus multiplatform 70 is 100))
There is another special platform called "optional" (exact spelling, case insensitive) which will count that line against no platforms, which will keep it from increasing the maximum score

# The last column is not currently parsed, but should be used for comments which a future version of the GUI might display


"eq","aslr","true","15","Multiplatform","Multiplatform check for ASLR"
"eq","dep","true","15","Multiplatform","Multiplatform check for DEP"
"eq","arch","amd64","10","Multiplatform","Multiplatform check for binary ISA / process CPU architecture"
"eq","ControlFlowGuard","true","30","Multiplatform","Multiplatform check for ControlFlowGuard" (any Linux CFI will be mapped to this term eventually)

"eq","authenticode","true","20","Windows","Windows check for signed code"
"eq","authenticode","false","-40","Windows","Windows punishment for unsigned code"
"eq","strongnaming","true","5","Optional","Windows check for StrongNaming"
"eq","HighentropyVA","true","10","Windows","Windows check for HighEntropyVA"

"eq","Privileges","SYSTEM","-100","Windows","Windows specific check for privs that elevate to system level. Running as SYSTEM will entirely null out a score."
# SeDebugPrivilege|SeTakeOwnershipPrivilege|SeTcbPrivilege|SeLoadDriverPrivilege
"ct","Privileges","SeDebugPrivilege","-10","Windows","Windows specific check for privs that elevate to system level"
"ct","Privileges","SeTakeOwnershipPrivilege","-10","Windows","Windows specific check for privs that elevate to system level"
"ct","Privileges","SeTcbPrivilege","-10","Windows","Windows specific check for privs that elevate to system level"
"ct","Privileges","SeLoadDriverPrivilege","-10","Windows","Windows specific check for privs that elevate to system level"
# SeAuditPrivilege|SeImpersonatePrivilege|SeBackupPrivilege
"ct","Privileges","SeAuditPrivilege","-5","Windows","Windows specific check for privs that elevate to system level"
"ct","Privileges","SeImpersonatePrivilege","-5","Windows","Windows specific check for privs that elevate to system level"
"ct","Privileges","SeBackupPrivilege","-5","Windows","Windows specific check for privs that elevate to system level"

"eq","relro","true","10","Linux","Linux Full RELRO","Linux specific check for FULL RELRO"
"eq","relro","partial","5","Linux","Linux Partial RELRO","Linux specific check for PARTIAL RELRO"
"eq","stackcanary","true","10","Linux","Linux stack canary","Linux specific check for stack canary"
